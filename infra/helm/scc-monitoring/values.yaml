deploySecret:
  awsRoleArn: arn:aws:iam::291889421067:role/scc-deploy-secret

filesDir: files

cert-manager:
  installCRDs: true
  prometheus:
    enabled: false

# Default values for openobserve-collector.
exporters:
  # TODO: 여기에 secret 어떻게 넣을지 고민
  otlphttp/openobserve:
    endpoint: 'https://api.openobserve.ai/api/default/'
    headers:
      Authorization: Basic < base64 encoded auth >
  otlphttp/openobserve_k8s_events:
    endpoint: 'https://api.openobserve.ai/api/default/'
    headers:
      Authorization: Basic < base64 encoded auth >
      stream-name: k8s_events

replicaCount: 1

image:
  repository: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib
  pullPolicy: IfNotPresent
  tag: 0.96.0
imagePullSecrets: []
nameOverride: ''
fullnameOverride: ''
serviceAccount:
  create: true
  annotations: {}
  name: ''
labels: {}

opentelemetry-operator:
  enabled: false
  admissionWebhooks:
    certManager:
      enabled: false
      autoGenerateCert: true
  manager:
    featureGates: '--operator.autoinstrumentation.go=true'
autoinstrumentation:
  enabled: true
  collectorTarget: traces
  propagators:
    - tracecontext
    - baggage
podAndServiceMonitor:
  create: true
podAnnotations: {}
podSecurityContext: {}
securityContext: {}
agent:
  enabled: true
  tolerations:
    - key: exampleKey1
      operator: Equal
      value: 'true'
      effect: NoSchedule
  resources: {}
  receivers:
    otlp:
      protocols:
        grpc: {}
        http: {}
    prometheus:
      config:
        scrape_configs:
          - job_name: otel-collector
            scrape_interval: 5s
            static_configs:
              - targets:
                  - '0.0.0.0:8888'
    filelog/std:
      include:
        - /var/log/pods/*/*/*.log
      exclude:
        - /var/log/pods/*/otel-collector/*.log
        - /var/log/pods/*/otc-container/*.log
        - /var/log/pods/*/openobserve/*.log
      start_at: end
      include_file_path: true
      include_file_name: false
      operators:
        - type: router
          id: get-format
          routes:
            - output: parser-docker
              expr: 'body matches "^\\{"'
            - output: parser-crio
              expr: 'body matches "^[^ Z]+ "'
            - output: parser-containerd
              expr: 'body matches "^[^ Z]+Z"'
        - type: regex_parser
          id: parser-crio
          regex: >-
            ^(?P<time>[^ Z]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*)
            ?(?P<log>.*)$
          output: extract_metadata_from_filepath
          timestamp:
            parse_from: attributes.time
            layout_type: gotime
            layout: '2006-01-02T15:04:05.999999999Z07:00'
        - type: regex_parser
          id: parser-containerd
          regex: >-
            ^(?P<time>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*)
            ?(?P<log>.*)$
          output: extract_metadata_from_filepath
          timestamp:
            parse_from: attributes.time
            layout: '%Y-%m-%dT%H:%M:%S.%LZ'
        - type: json_parser
          id: parser-docker
          output: extract_metadata_from_filepath
          timestamp:
            parse_from: attributes.time
            layout: '%Y-%m-%dT%H:%M:%S.%LZ'
        - type: regex_parser
          id: extract_metadata_from_filepath
          regex: >-
            ^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]{36})\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$
          parse_from: 'attributes["log.file.path"]'
          cache:
            size: 128
        - type: move
          from: attributes.log
          to: body
        - type: move
          from: attributes.stream
          to: 'attributes["log.iostream"]'
        - type: move
          from: attributes.container_name
          to: 'resource["k8s.container.name"]'
        - type: move
          from: attributes.namespace
          to: 'resource["k8s.namespace.name"]'
        - type: move
          from: attributes.pod_name
          to: 'resource["k8s.pod.name"]'
        - type: move
          from: attributes.restart_count
          to: 'resource["k8s.container.restart_count"]'
        - type: move
          from: attributes.uid
          to: 'resource["k8s.pod.uid"]'
    hostmetrics:
      root_path: /hostfs
      collection_interval: 15s
      scrapers:
        cpu: {}
        disk: {}
        filesystem:
          exclude_mount_points:
            match_type: regexp
            mount_points:
              - /dev/.*
              - /proc/.*
              - /sys/.*
              - /run/k3s/containerd/.*
              - /var/lib/docker/.*
              - /var/lib/kubelet/.*
              - /snap/.*
          exclude_fs_types:
            match_type: strict
            fs_types:
              - autofs
              - binfmt_misc
              - bpf
              - cgroup2
              - configfs
              - debugfs
              - devpts
              - devtmpfs
              - fusectl
              - hugetlbfs
              - iso9660
              - mqueue
              - nsfs
              - overlay
              - proc
              - procfs
              - pstore
              - rpc_pipefs
              - securityfs
              - selinuxfs
              - squashfs
              - sysfs
              - tracefs
        load: {}
        network: {}
        process: {}
    kubeletstats:
      collection_interval: 15s
      auth_type: serviceAccount
      endpoint: 'https://${env:K8S_NODE_NAME}:10250'
      insecure_skip_verify: true
      extra_metadata_labels:
        - container.id
        - k8s.volume.type
      metric_groups:
        - node
        - pod
        - container
        - volume
      metrics:
        k8s.pod.cpu_limit_utilization:
          enabled: true
        k8s.pod.cpu_request_utilization:
          enabled: true
        k8s.pod.memory_limit_utilization:
          enabled: true
        k8s.pod.memory_request_utilization:
          enabled: true
  processors:
    resourcedetection:
      detectors:
        - system
        - env
        - k8snode
      override: true
      system:
        hostname_sources:
          - os
          - dns
    k8sattributes:
      auth_type: serviceAccount
      passthrough: false
      filter:
        node_from_env_var: K8S_NODE_NAME
      extract:
        labels:
          - tag_name: service.name
            key: app.kubernetes.io/name
            from: pod
          - tag_name: service.name
            key: k8s-app
            from: pod
          - tag_name: k8s.app.instance
            key: app.kubernetes.io/instance
            from: pod
          - tag_name: service.version
            key: app.kubernetes.io/version
            from: pod
          - tag_name: k8s.app.component
            key: app.kubernetes.io/component
            from: pod
        metadata:
          - k8s.pod.name
          - k8s.pod.uid
          - k8s.deployment.name
          - k8s.namespace.name
          - k8s.node.name
          - k8s.pod.start_time
      pod_association:
        - sources:
            - from: resource_attribute
              name: k8s.pod.uid
        - sources:
            - from: resource_attribute
              name: k8s.pod.name
            - from: resource_attribute
              name: k8s.namespace.name
            - from: resource_attribute
              name: k8s.node.name
        - sources:
            - from: resource_attribute
              name: k8s.pod.ip
        - sources:
            - from: resource_attribute
              name: k8s.pod.name
            - from: resource_attribute
              name: k8s.namespace.name
        - sources:
            - from: connection
    batch:
      send_batch_size: 10000
      timeout: 10s
  extensions:
    zpages: {}
  connectors: {}
  service:
    extensions:
      - zpages
    pipelines:
      logs:
        receivers:
          - filelog/std
        processors:
          - batch
          - k8sattributes
        exporters:
          - otlphttp/openobserve
      metrics:
        receivers:
          - kubeletstats
        processors:
          - batch
          - k8sattributes
        exporters:
          - otlphttp/openobserve
      traces:
        receivers:
          - otlp
        processors:
          - batch
          - k8sattributes
        exporters:
          - otlphttp/openobserve
gateway:
  enabled: true
  targetAllocator:
    enabled: true
  affinity: {}
  nodeSelector: {}
  tolerations: []
  resources: {}
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
  receivers:
    otlp:
      protocols:
        grpc: {}
        http: {}
    k8s_cluster:
      collection_interval: 30s
      node_conditions_to_report:
        - Ready
        - MemoryPressure
        - DiskPressure
        - PIDPressure
      allocatable_types_to_report:
        - cpu
        - memory
        - storage
      metrics:
        k8s.container.cpu_limit:
          enabled: false
        k8s.container.cpu_request:
          enabled: false
        k8s.container.memory_limit:
          enabled: false
        k8s.container.memory_request:
          enabled: false
    k8s_events:
      auth_type: serviceAccount
    k8sobjects:
      auth_type: serviceAccount
      objects:
        - name: pods
          mode: pull
          field_selector: status.phase=Running
          interval: 15m
        - name: events
          mode: watch
          group: events.k8s.io
    prometheus:
      config:
        scrape_configs:
          - job_name: otel-collector
            scrape_interval: 5s
            static_configs:
              - targets:
                  - '0.0.0.0:8888'
          - job_name: cadvisor
            scheme: https
            sample_limit: 10000
            scrape_interval: 15s
            scrape_timeout: 10s
            metrics_path: /metrics/cadvisor
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
            authorization:
              credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
              type: Bearer
            kubernetes_sd_configs:
              - role: node
            metric_relabel_configs:
              - action: labeldrop
                regex: name
              - action: drop
                regex: >-
                  container_cpu_(cfs_throttled_seconds_total|load_average_10s|system_seconds_total|user_seconds_total)
                replacement: $1
                separator: ;
                source_labels:
                  - __name__
              - action: drop
                regex: >-
                  container_fs_(io_current|reads_merged_total|sector_reads_total|sector_writes_total|writes_merged_total)
                separator: ;
                source_labels:
                  - __name__
              - action: drop
                regex: container_memory_(mapped_file|swap)
                replacement: $1
                separator: ;
                source_labels:
                  - __name__
              - action: drop
                regex: container_(file_descriptors|tasks_state|threads_max)
                replacement: $1
                separator: ;
                source_labels:
                  - __name__
              - action: drop
                regex: container_spec.*
                replacement: $1
                separator: ;
                source_labels:
                  - __name__
              - action: drop
                regex: .+;
                replacement: $1
                separator: ;
                source_labels:
                  - id
                  - pod
            relabel_configs:
              - action: replace
                regex: (.*)
                replacement: https-metrics
                separator: ;
                target_label: endpoint
              - action: replace
                replacement: kubelet
                target_label: job
              - action: replace
                regex: (.*)
                replacement: '${1}'
                separator: ;
                source_labels:
                  - __meta_kubernetes_node_name
                target_label: node
              - action: replace
                regex: (.*)
                replacement: $1
                separator: ;
                source_labels:
                  - __metrics_path__
                target_label: metrics_path
  processors:
    resourcedetection:
      detectors:
        - env
      override: true
      timeout: 2s
    k8sattributes:
      auth_type: serviceAccount
      passthrough: false
      extract:
        labels:
          - tag_name: service.name
            key: app.kubernetes.io/name
            from: pod
          - tag_name: service.name
            key: k8s-app
            from: pod
          - tag_name: k8s.app.instance
            key: app.kubernetes.io/instance
            from: pod
          - tag_name: service.version
            key: app.kubernetes.io/version
            from: pod
          - tag_name: k8s.app.component
            key: app.kubernetes.io/component
            from: pod
        metadata:
          - k8s.namespace.name
          - k8s.pod.name
          - k8s.pod.uid
          - k8s.node.name
          - k8s.pod.start_time
          - k8s.deployment.name
          - k8s.replicaset.name
          - k8s.replicaset.uid
          - k8s.daemonset.name
          - k8s.daemonset.uid
          - k8s.job.name
          - k8s.job.uid
          - k8s.container.name
          - k8s.cronjob.name
          - k8s.statefulset.name
          - k8s.statefulset.uid
          - container.image.tag
          - container.image.name
          - k8s.cluster.uid
      pod_association:
        - sources:
            - from: resource_attribute
              name: k8s.pod.uid
        - sources:
            - from: resource_attribute
              name: k8s.pod.name
            - from: resource_attribute
              name: k8s.namespace.name
            - from: resource_attribute
              name: k8s.node.name
        - sources:
            - from: resource_attribute
              name: k8s.pod.ip
        - sources:
            - from: resource_attribute
              name: k8s.pod.name
            - from: resource_attribute
              name: k8s.namespace.name
        - sources:
            - from: connection
    batch:
      send_batch_size: 10000
      timeout: 10s
  extensions:
    zpages: {}
  connectors:
    spanmetrics:
      histogram:
        explicit:
          buckets:
            - 100us
            - 1ms
            - 2ms
            - 6ms
            - 10ms
            - 100ms
            - 250ms
            - 500ms
            - 1000ms
            - 1400ms
            - 2000ms
            - 5s
            - 10s
            - 30s
            - 60s
            - 120s
            - 300s
            - 600s
      dimensions:
        - name: http.method
          default: GET
        - name: http.status_code
      exemplars:
        enabled: true
      dimensions_cache_size: 1000
      aggregation_temporality: AGGREGATION_TEMPORALITY_CUMULATIVE
      metrics_flush_interval: 15s
    servicegraph:
      latency_histogram_buckets:
        - 1
        - 2
        - 3
        - 4
        - 5
      dimensions:
        - http.method
      store:
        ttl: 1s
        max_items: 10
  service:
    extensions:
      - zpages
    pipelines:
      logs/k8s_events:
        receivers:
          - k8s_events
        processors:
          - batch
          - k8sattributes
          - resourcedetection
        exporters:
          - otlphttp/openobserve_k8s_events
      metrics:
        receivers:
          - k8s_cluster
          - prometheus
          - spanmetrics
          - servicegraph
        processors:
          - batch
          - k8sattributes
          - resourcedetection
        exporters:
          - otlphttp/openobserve
      traces:
        receivers:
          - otlp
        processors:
          - batch
          - k8sattributes
          - resourcedetection
        exporters:
          - otlphttp/openobserve
          - spanmetrics
          - servicegraph

# refs: https://github.com/prometheus-community/helm-charts/blob/5bd2f828f67aea8861f31433edb9c5c503fe5fcc/charts/kube-prometheus-stack/values.yaml
#kube-prometheus-stack:
#  alertmanager:
#    enabled: true
#    config:
#      global:
#        resolve_timeout: 5m
#      inhibit_rules:
#        - source_matchers:
#            - 'severity = critical'
#          target_matchers:
#            - 'severity =~ warning|info'
#          equal:
#            - 'namespace'
#            - 'alertname'
#        - source_matchers:
#            - 'severity = warning'
#          target_matchers:
#            - 'severity = info'
#          equal:
#            - 'namespace'
#            - 'alertname'
#        - source_matchers:
#            - 'alertname = InfoInhibitor'
#          target_matchers:
#            - 'severity = info'
#          equal:
#            - 'namespace'
#        - target_matchers:
#            - 'alertname = InfoInhibitor'
#      route:
#        group_by: [ 'namespace' ]
#        group_wait: 30s
#        group_interval: 5m
#        repeat_interval: 12h
#        receiver: 'slack-agnica'
#        routes:
#          - receiver: 'slack-agnica'
#            matchers:
#              - alertname = "Watchdog"
#      templates:
#        - '/etc/alertmanager/config/*.tmpl'
#      receivers:
#        - name: 'null'
#        - name: 'slack-agnica'
#          slack_configs:
#            - send_resolved: true
#              api_url: https://hooks.slack.com/services/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
