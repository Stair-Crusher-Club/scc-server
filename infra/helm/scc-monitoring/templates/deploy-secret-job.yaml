apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "scc-monitoring.fullname" . }}-deploy-secret-job
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "20"
spec:
  template:
    spec:
      serviceAccountName: {{ include "scc-monitoring.serviceAccountName" . }}-deploy-secret
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          image: "mozilla/sops:v3-alpine"
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh"]
          args:
            - -c
            - |-
              wget "https://dl.k8s.io/release/$(wget https://dl.k8s.io/release/stable.txt -O-)/bin/linux/amd64/kubectl" &&
              chmod u+x kubectl &&
              wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq &&
              chmod +x /usr/bin/yq &&
              mkdir secret &&
              sops -d /app/conf/secret-raw.yaml > secret/secret.yaml &&
              echo 'apiVersion: v1
              kind: Secret
              metadata:
                name: scc-monitoring-secret
                namespace: scc-monitoring
              type: Opaque
              stringData: {}' > scc-monitoring-secret.yaml &&
              yq -i ".stringData += $(yq secret/secret.yaml -o json)" scc-monitoring-secret.yaml &&
              ./kubectl apply -f scc-monitoring-secret.yaml
#              ./kubectl create secret generic {{ include "scc-monitoring.fullname" . }}-secret --from-file=secret/secret.yaml --dry-run=client -o yaml | ./kubectl apply -f -
#              TODO: kubectl을 이미지에 미리 깔아놓기
          env:
            - name: AWS_STS_REGIONAL_ENDPOINTS
              value: regional
            - name: AWS_REGION
              value: ap-northeast-2
            - name: AWS_ROLE_ARN
              value: "{{ .Values.deploySecret.awsRoleArn }}"
            - name: AWS_WEB_IDENTITY_TOKEN_FILE
              value: /var/run/secrets/eks.amazonaws.com/serviceaccount/token
          volumeMounts:
            - name: aws-iam-token
              mountPath: /var/run/secrets/eks.amazonaws.com/serviceaccount
              readOnly: true
            - name: config-volume
              mountPath: /app/conf
              readOnly: true
      volumes:
        - name: aws-iam-token
          projected:
            defaultMode: 420
            sources:
              - serviceAccountToken:
                  audience: sts.amazonaws.com
                  expirationSeconds: 86400
                  path: token
        - name: config-volume
          configMap:
            name: {{ include "scc-monitoring.fullname" . }}-for-secret
      restartPolicy: Never
  backoffLimit: 3
