save:
INSERT INTO place_accessibility
VALUES :place_accessibility
ON CONFLICT(id) DO UPDATE SET
    place_id = EXCLUDED.place_id,
    is_first_floor = EXCLUDED.is_first_floor,
    stair_info = EXCLUDED.stair_info,
    has_slope = EXCLUDED.has_slope,
    image_urls = EXCLUDED.image_urls,
    user_id = EXCLUDED.user_id,
    created_at = EXCLUDED.created_at,
    deleted_at = NULL;

removeAll:
DELETE FROM place_accessibility;

findById:
SELECT *
FROM place_accessibility
WHERE place_accessibility.id = :id
    AND deleted_at IS NULL;

findByPlaceIds:
SELECT *
FROM place_accessibility
WHERE place_id IN :placeIds
    AND deleted_at IS NULL;

findByPlaceId:
SELECT *
FROM place_accessibility
WHERE place_id = :placeId
    AND deleted_at IS NULL;

findByUserId:
SELECT *
FROM place_accessibility
WHERE user_id = :userId
    AND deleted_at IS NULL;

countByEupMyeonDong:
SELECT COUNT(1)
FROM place_accessibility
    JOIN place ON place.id = place_accessibility.place_id
WHERE place.eup_myeon_dong_id = :eupMyeonDongId
    AND place_accessibility.deleted_at IS NULL;

countByUserId:
SELECT COUNT(1)
FROM place_accessibility
WHERE user_id = :userId
    AND deleted_at IS NULL;

hasAccessibilityNotRegisteredPlaceInBuilding:
SELECT count(p.id) > 0
FROM place p
INNER JOIN building b ON b.id = :buildingId AND b.id = p.building_id
LEFT OUTER JOIN place_accessibility pa ON p.id = pa.place_id
WHERE pa.id IS NULL
    AND pa.deleted_at IS NULL;

findByBuildingId:
SELECT pa.*
FROM place_accessibility pa
INNER JOIN place p ON p.id = pa.place_id
INNER JOIN building b ON b.id = p.building_id
WHERE b.id = :buildingId
    AND pa.deleted_at IS NULL;

findByPlaceNameContainsPagingByCreatedAtDesc:
SELECT pa.*
FROM place_accessibility pa
INNER JOIN place p ON p.id = pa.place_id
WHERE
    p.name LIKE :placeNameLike
    AND (
        (pa.created_at = :cursorCreatedAt AND pa.id < :cursorId)
        OR (pa.created_at < :cursorCreatedAt)
    )
ORDER BY pa.created_at DESC
LIMIT :limit;

findAllPagingByCreatedAtDesc:
SELECT pa.*
FROM place_accessibility pa
WHERE
    (
        (pa.created_at = :cursorCreatedAt AND pa.id < :cursorId)
        OR (pa.created_at < :cursorCreatedAt)
    )
ORDER BY pa.created_at DESC
LIMIT :limit;

countAll:
SELECT COUNT(*)
FROM place_accessibility pa
WHERE pa.deleted_at IS NULL;

remove:
UPDATE place_accessibility
SET deleted_at = :deletedAt
WHERE id = :id;
