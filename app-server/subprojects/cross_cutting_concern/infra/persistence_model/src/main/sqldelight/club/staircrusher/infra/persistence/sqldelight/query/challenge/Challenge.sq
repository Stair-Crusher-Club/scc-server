save:
INSERT INTO challenge
VALUES :challenge
ON CONFLICT(id) DO UPDATE SET
    name = EXCLUDED.name,
    is_public = EXCLUDED.is_public,
    invitation_code = EXCLUDED.invitation_code,
    passcode = EXCLUDED.passcode,
    is_complete = EXCLUDED.is_complete,
    starts_at = EXCLUDED.starts_at,
    ends_at = EXCLUDED.ends_at,
    goal = EXCLUDED.goal,
    milestones = EXCLUDED.milestones,
    conditions = EXCLUDED.conditions,
    created_at = EXCLUDED.created_at,
    updated_at = EXCLUDED.updated_at,
    description = EXCLUDED.description;

findAllOrderByCreatedAtDesc:
SELECT *
FROM challenge
ORDER BY created_at DESC;

findById:
SELECT *
FROM challenge
WHERE challenge.id = :id;

findByIds:
SELECT *
FROM challenge
WHERE challenge.id IN :ids;

findByInvitationCode:
SELECT *
FROM challenge
WHERE challenge.invitation_code = :invitationCode;

findByTime:
SELECT *
FROM challenge
WHERE
    :startRangeOfStartsAt < challenge.starts_at
    AND challenge.starts_at < :endRangeOfStartAt
    AND (
        challenge.ends_at IS NULL
        OR (
            :startRangeOfEndsAt < challenge.ends_at
            AND challenge.ends_at < :endRangeOfEndsAt
        )
    )
ORDER BY challenge.created_at DESC;

-- userId 가 참여하는 챌린지들
findByUidAndTime:
SELECT *
FROM challenge
    JOIN (
        SELECT *
        FROM challenge_participation
        WHERE challenge_participation.user_id = :userId
    ) AS my_participations
    ON challenge.id = my_participations.challenge_id
WHERE
    :startRangeOfStartsAt < challenge.starts_at
    AND challenge.starts_at < :endRangeOfStartAt
    AND (
        challenge.ends_at IS NULL
        OR (
            :startRangeOfEndsAt < challenge.ends_at
            AND challenge.ends_at < :endRangeOfEndsAt
        )
    )
ORDER BY my_participations.created_at DESC;

removeById:
DELETE
FROM challenge
WHERE challenge.id = :id;

removeAll:
DELETE FROM challenge;
