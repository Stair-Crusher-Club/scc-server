openapi: '3.0.0'
info:
  title: Stair Crusher Club API Specification
  version: '1.0.0'
  description: |
    ## 계단정복지도 서비스의 서버 - 클라이언트 통신을 위한 API 명세.

defaultContentType: application/json

servers:
  - url: https://{env}.staircrusher.club/
    variables:
      env:
        description: API 주소 환경 설정
        default: 'api'
        enum:
          - 'api'
          - 'api.dev'

paths:
  /signUp:
    post:
      summary: 회원가입을 한다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nickname:
                  type: string
                password:
                  type: string
                instagram_id:
                  type: string
              required:
                - nickname
                - password
      responses:
        '204':
          description: |
            빈 response body를 내려준다.
            대신 Header의 X-SCC-ACCESS-KEY에 access token을 내려준다. (회원가입하면 자동 로그인)
            클라이언트는 이 토큰을 Bearer auth의 토큰으로 사용하면 된다.

  /login:
    post:
      summary: 로그인을 한다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nickname:
                  type: string
                password:
                  type: string
              required:
                - nickname
                - password
      responses:
        '204':
          description: |
            빈 response body를 내려준다.
            대신 Header의 X-SCC-ACCESS-KEY에 access token을 내려준다. (회원가입하면 자동 로그인)
            클라이언트는 이 토큰을 Bearer auth의 토큰으로 사용하면 된다.

  /listAdministrativeAreas:
    post:
      summary: 점포를 검색한다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  siGunGus:
                    type: array
                    items:
                      $ref: '#/components/schemas/SiGunGu'
                  eupMyeonDongs:
                    type: array
                    items:
                      $ref: '#/components/schemas/EupMyeonDong'

  /searchPlaces:
    post:
      summary: 점포를 검색한다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                searchText:
                  type: string
                currentLocation:
                  $ref: '#/components/schemas/Location'
                distanceMetersLimit:
                  type: integer
                siGunGuId:
                  type: string
                eupMyeonDongId:
                  type: string
                category:
                  $ref: '#/components/schemes/PlaceCategory'
              required:
                - searchText
                - distanceMetersLimit
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/PlaceListItem'

  /getAccessibility:
    post:
      summary: 건물 & 점포의 접근성 정보를 조회한다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                placeId:
                  type: string
              required:
                - placeId
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessibilityInfoDto'

  /getImageUploadUrls:
    post:
      summary: 점포 정보 등록 등의 상황에서 이미지를 업로드하기 위한 URL을 받아 온다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                count:
                  type: integer
                  description: 업로드할 이미지 수.
                filenameExtension:
                  type: string
                  description: 업로드할 이미지의 확장자. '.'을 붙이지 말아야 한다. e.g. png, jpeg 등.
              required:
                - count
                - filenameExtension
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    url:
                      type: string
                    expireAt:
                      $ref: '#/components/schemas/EpochMillisTimestamp'
                      description: url의 만료 시각.
                  required:
                    - url
                    - expireAt

  /registerAccessibility:
    post:
      summary: 건물 & 점포의 접근성 정보를 등록한다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                buildingAccessibilityParams:
                  $ref: '#/components/schemas/RegisterBuildingAccessibilityRequestDto'
                  description: 각 건물에 대해 1번만 등록될 수 있다.
                placeAccessibilityParams:
                  $ref: '#/components/schemas/RegisterPlaceAccessibilityRequestDto'
              required:
                - placeAccessibilityParams
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  buildingAccessibility:
                    $ref: '#/components/schemas/BuildingAccessibility'
                    description: 정보가 아직 채워지지 않았으면 null.
                  buildingAccessibilityComments:
                    type: array
                    items:
                      $ref: '#/components/schemas/BuildingAccessibilityComment'
                    description: 정보가 아직 채워지지 않았으면 empty list.
                  placeAccessibility:
                    $ref: '#/components/schemas/PlaceAccessibility'
                  placeAccessibilityComments:
                    type: array
                    items:
                      $ref: '#/components/schemas/PlaceAccessibilityComment'
                  registeredUserOrder:
                    type: integer
                    description: "'n번째 정복자'를 표시해주기 위한 값."
                required:
                  - buildingAccessibilityComments
                  - placeAccessibility
                  - placeAccessibilityComments
                  - registeredUserOrder

  /registerPlaceAccessibility:
    post:
      summary: 점포의 접근성 정보를 등록한다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterPlaceAccessibilityRequestDto'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessibilityInfo:
                    $ref: '#/components/schemas/AccessibilityInfoDto'
                  registeredUserOrder:
                    type: integer
                    description: "'n번째 정복자'를 표시해주기 위한 값."
                required:
                  - accessibilityInfo
                  - registeredUserOrder

  /registerBuildingAccessibility:
    post:
      summary: 건물 접근성 정보를 등록한다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterBuildingAccessibilityRequestDto'
      responses:
        '204':
          description: |
            장소 id를 알 수 없으므로 GetAccessibilityInfo를 내려줄 수 없다.
            따라서 건물 장소 등록 이후에 명시적으로 /getAccessibility API를 별도로 호출하도록 한다.

  /listPlacesInBuilding:
    post:
      summary: 특정 건물의 점포를 조회한다.
      description: "'이 건물에 다른 점포 등록하기'를 눌렀을 때 호출된다."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                buildingId:
                  type: string
              required:
                - buildingId
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/PlaceListItem'

  /listPlaceCategories:
    post:
      summary: 점포 카테고리들을 조회한다.
      description: "특정 카테고리로 검색할 때 이용한다."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: { }
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/PlaceCategoryDto'

  /registerBuildingAccessibilityComment:
    post:
      summary: 건물에 의견을 추가한다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                buildingId:
                  type: string
                comment:
                  type: string
              required:
                - buildingId
                - comment
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  buildingAccessibilityComment:
                    $ref: '#/components/schemas/BuildingAccessibilityComment'
                    description: 방금 등록된 댓글.
                required:
                  - buildingAccessibilityComment

  /registerPlaceAccessibilityComment:
    post:
      summary: 점포에 의견을 추가한다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                placeId:
                  type: string
                comment:
                  type: string
              required:
                - placeId
                - comment
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  placeAccessibilityComment:
                    $ref: '#/components/schemas/PlaceAccessibilityComment'
                    description: 방금 등록된 댓글.
                required:
                  - placeAccessibilityComment

  /giveBuildingAccessibilityUpvote:
    post:
      summary: "'이 정보가 도움이 돼요'를 준다."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GiveBuildingAccessibilityUpvoteRequestDto'
      responses:
        '204': {}

  /cancelBuildingAccessibilityUpvote:
    post:
      summary: "'이 정보가 도움이 돼요'를 취소한다."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelBuildingAccessibilityUpvoteRequestDto'
      responses:
        '204': {}

  /listConqueredPlaces:
    post:
      summary: 내가 정복한 장소 목록을 조회한다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/PlaceListItem'

  /updateUserInfo:
    post:
      summary: 유저 정보를 수정한다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nickname:
                  type: string
                instagramId:
                  type: string
                  description: 변경되지 않았으면 기존 값을 그대로 올려준다.
              required:
                - nickname
                - instagramId
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                required:
                  - user

  /deleteUser:
    post:
      summary: 계정을 삭제한다.
      responses:
        '204': {}

  /deleteAccessibility:
    post:
      summary: |
        등록한 접근성 정보를 삭제한다.
        기본적으로는 장소 정보만 삭제하지만, 삭제하는 장소 정보가 해당 건물의 마지막 장소 정보일 경우 건물 정보도 함께 삭제한다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                placeAccessibilityId:
                  type: string
                  description: 삭제할 장소 정보의 아이디
              required:
                - placeAccessibilityId
      responses:
        '204': {}
        '400':
          $ref: '#/components/responses/ApiFailure'

  /getAccessibilityRank:
    post:
      summary: 내 현재 랭크를 조회한다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessibilityRank:
                    $ref: '#/components/schemas/AccessibilityRankDTO'
                required:
                  - accessibilityRank

  /getAccessibilityLeaderboard:
    post:
      summary: 현재 탑 랭커들을 조회한다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  ranks:
                    type: array
                    items:
                      $ref: '#/components/schemas/AccessibilityRankDTO'
                required:
                  - ranks

  /getCountForNextRank:
    post:
      summary: 다음 랭크로 올라가기 위한 점수를 조회한다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  countForNextRank: # 다음 랭크로 올라가기 위해 필요한 점수
                    type: integer
                required:
                  - countForNextRank

components:
  # Reusable schemas (data models)
  schemas:
    EpochMillisTimestamp:
      description: 특정 시각을 표현하기 위한 모델.
      type: object
      properties:
        value:
          type: integer
          format: int64
      required:
        - value

    Location:
      description: 위치를 위경도로 표현하기 위한 모델.
      type: object
      properties:
        lng:
          type: number
          format: double
        lat:
          type: number
          format: double
      required:
        - lng
        - lat

    SiGunGu:
      description: 시군구를 표현하기 위한 모델.
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      required:
        - id
        - name

    EupMyeonDong:
      description: 읍면동을 표현하기 위한 모델.
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        siGunGuId:
          type: string
      required:
        - id
        - name
        - siGunGuId

    User:
      description: 유저 정보.
      properties:
        id:
          type: string
        nickname:
          type: string
        instagramId:
          type: string
      required:
        - id
        - nickname

    Place:
      description: 점포 정보.
      properties:
        id:
          type: string
        name:
          type: string
          description: 점포의 human-readable한 이름.
        address:
          type: string
          description: 점포의 human-readable한 주소.
      required:
        - id
        - name
        - address

    Building:
      description: 건물 정보.
      properties:
        id:
          type: string
        address:
          type: string
          description: 건물의 human-readable한 주소.
      required:
        - id
        - address

    StairInfo:
      type: string
      enum:
        - UNDEFINED # e.g. 엘리베이터가 아예 없는 경우, 엘리베이터 계단 정보는 UNDEFINED로 올린다.
        - NONE
        - ONE
        - TWO_TO_FIVE
        - OVER_SIX

    PlaceAccessibility:
      description: 점포의 접근성 정보.
      properties:
        id:
          type: string
        isFirstFloor:
          type: boolean
        stairInfo:
          $ref: '#/components/schemas/StairInfo'
        hasSlope:
          type: boolean
        imageUrls:
          type: array
          items:
            type: string
        placeId:
          type: string
        registeredUserName:
          type: string
          description: 익명으로 등록되었으면 null.
        deletionInfo:
          type: object
          description: 삭제 가능하면 non-null, 삭제 불가능하면 null.
          properties:
            isLastInBuilding:
              type: boolean
              description: 장소가 포함된 건물 중 마지막으로 남은 장소 정보인지 여부.
          required:
            - isLastInBuilding
      required:
        - id
        - isFirstFloor
        - stairInfo
        - hasSlope
        - placeId
        - imageUrls

    PlaceAccessibilityComment:
      description: 점포에 대한 의견.
      properties:
        id:
          type: string
        placeId:
          type: string
        user:
          $ref: '#/components/schemas/User'
          description: 익명으로 달린 댓글이면 null.
        comment:
          type: string
        createdAt:
          $ref: '#/components/schemas/EpochMillisTimestamp'
      required:
        - id
        - placeId
        - comment
        - createdAt

    BuildingAccessibility:
      description: 건물의 접근성 정보.
      properties:
        id:
          type: string
        entranceStairInfo:
          $ref: '#/components/schemas/StairInfo'
        entranceImageUrls:
          type: array
          items:
            type: string
        hasSlope:
          type: boolean
        hasElevator:
          type: boolean
        elevatorStairInfo:
          $ref: '#/components/schemas/StairInfo'
        elevatorImageUrls:
          type: array
          items:
            type: string
        buildingId:
          type: string
        registeredUserName:
          type: string
          description: 익명으로 등록되었으면 null.
        isUpvoted:
          type: boolean
          description: 유저가 이 접근성 정보에 '도움이 돼요'를 표시했는지 여부.
        totalUpvoteCount:
          type: integer
          description: 이 접근성 정보가 '도움이 돼요'를 받은 총 횟수. 이 숫자에 따라 버튼 텍스트에 '도움이 돼요'나 '정확한 정보에요'를 사용한다.
      required:
        - id
        - entranceStairInfo
        - entranceImageUrls
        - hasSlope
        - hasElevator
        - elevatorStairInfo
        - elevatorImageUrls
        - buildingId
        - isUpvoted
        - totalUpvoteCount

    BuildingAccessibilityComment:
      description: 건물에 대한 의견.
      properties:
        id:
          type: string
        buildingId:
          type: string
        user:
          $ref: '#/components/schemas/User'
          description: 익명으로 달린 댓글이면 null.
        comment:
          type: string
        createdAt:
          $ref: '#/components/schemas/EpochMillisTimestamp'
      required:
        - id
        - buildingId
        - comment
        - createdAt

    PlaceListItem:
      type: object
      properties:
        place:
          $ref: '#/components/schemas/Place'
        building:
          $ref: '#/components/schemas/Building'
        hasBuildingAccessibility:
          type: boolean
        hasPlaceAccessibility:
          type: boolean
        distanceMeters:
          type: integer
          description: 요청에 currentLocation이 올라왔을 경우에만 non-null.
        isAccessibilityRegistrable:
          type: boolean
          description: 접근성 정보를 등록할 수 있는지 여부.
      required:
        - place
        - building
        - hasBuildingAccessibility
        - hasPlaceAccessibility
        - isAccessibilityRegistrable

    PlaceCategory:
      type: string
      enum:
        - ACCOMODATION
        - RESTAURANT
        - CAFE

    PlaceCategoryDto:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/PlaceCategory'
        name:
          type: string

    AccessibilityInfoDto:
      type: object
      properties:
        buildingAccessibility:
          $ref: '#/components/schemas/BuildingAccessibility'
          description: 정보가 아직 채워지지 않았으면 null.
        buildingAccessibilityComments:
          type: array
          items:
            $ref: '#/components/schemas/BuildingAccessibilityComment'
          description: 정보가 아직 채워지지 않았으면 empty list.
        placeAccessibility:
          $ref: '#/components/schemas/PlaceAccessibility'
          description: 정보가 아직 채워지지 않았으면 null.
        placeAccessibilityComments:
          type: array
          items:
            $ref: '#/components/schemas/PlaceAccessibilityComment'
          description: 정보가 아직 채워지지 않았으면 empty list.
        hasOtherPlacesToRegisterInBuilding:
          type: boolean
          description: "'이 건물의 다른 점포 등록하기'를 보여줄지 여부."
      required:
        - buildingAccessibilityComments
        - placeAccessibilityComments
        - hasOtherPlacesToRegisterInBuilding

    RegisterBuildingAccessibilityRequestDto:
      type: object
      description: 각 건물에 대해 1번만 등록될 수 있다.
      properties:
        buildingId:
          type: string
        entranceStairInfo:
          $ref: '#/components/schemas/StairInfo'
        entranceImageUrls:
          type: array
          items:
            type: string
        hasSlope:
          type: boolean
        hasElevator:
          type: boolean
        elevatorStairInfo:
          $ref: '#/components/schemas/StairInfo'
        elevatorImageUrls:
          type: array
          items:
            type: string
        comment:
          type: string
      required:
        - buildingId
        - entranceStairInfo
        - entranceImageUrls
        - hasSlope
        - hasElevator
        - elevatorStairInfo
        - elevatorImageUrls

    RegisterPlaceAccessibilityRequestDto:
      type: object
      properties:
        placeId:
          type: string
        isFirstFloor:
          type: boolean
        stairInfo:
          $ref: '#/components/schemas/StairInfo'
        hasSlope:
          type: boolean
        imageUrls:
          type: array
          items:
            type: string
        comment:
          type: string
      required:
        - placeId
        - isFirstFloor
        - stairInfo
        - hasSlope
        - imageUrls

    AccessibilityRankDTO:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        conqueredCount:
          type: integer
          description: 접근성 정보를 등록한 장소의 수.
        rank:
          type: integer
          format: int64
          description: 현재 나의 랭크. 1부터 시작.
      required:
        - user
        - conqueredCount
        - rank

    GiveBuildingAccessibilityUpvoteRequestDto:
      type: object
      properties:
        buildingAccessibilityId:
          type: string
      required:
        - buildingAccessibilityId

    CancelBuildingAccessibilityUpvoteRequestDto:
      type: object
      properties:
        buildingAccessibilityId:
          type: string
      required:
        - buildingAccessibilityId

    ApiErrorResponse:
      type: object
      properties:
        msg:
          type: string
          description: reason for error
        code:
          type: string # Do not change to integer. Jackson's @JsonProperty does not support number serialization.
          x-enum-varnames:
            - INTERNAL_FAILURE # -999999
            - INVALID_AUTHENTICATION # 1
          enum:
            - -999999
            - 1

  responses:
    ApiFailure:
      description: failed to get response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorResponse'
